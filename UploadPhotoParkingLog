public with sharing class UploadPhotoParkingLog {
    
    @AuraEnabled
    public static void linkFilesToRecord(Id recordId, List<Id> fileIds) {
        List<ContentDocumentLink> links = new List<ContentDocumentLink>();

        for (Id fileId : fileIds) {
            links.add(new ContentDocumentLink(
                ContentDocumentId = fileId,
                LinkedEntityId = recordId,
                ShareType = 'V',
                Visibility = 'AllUsers'
            ));
        }

        insert links;
    }

    @AuraEnabled
    public static Id uploadFile(String fileName, String fileType, String base64Data) {
        try {
            ContentVersion contentVersion = new ContentVersion(
                Title = fileName,
                PathOnClient = '/' + fileName,
                VersionData = EncodingUtil.base64Decode(base64Data),
                IsMajorVersion = true
            );
            insert contentVersion;

            ContentVersion insertedVersion = [SELECT ContentDocumentId FROM ContentVersion WHERE Id = :contentVersion.Id LIMIT 1];

            return insertedVersion.ContentDocumentId;
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }

    @AuraEnabled
    public static void UpdateDriverName(Id recordId, String driver,String UserTeam) {
        Parking_Log__c parkingLog = [SELECT Id, Address__c FROM Parking_Log__c WHERE Id = :recordId LIMIT 1];
        parkingLog.Driver__c = driver; // Assuming you have an Address__c field to store the address
        parkingLog.User_Team__c = UserTeam;
        update parkingLog;
    }
}
